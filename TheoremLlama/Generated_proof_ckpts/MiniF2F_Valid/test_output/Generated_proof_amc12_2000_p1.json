{
    "Name": "amc12_2000_p1",
    "Statement": "theorem amc12_2000_p1\n  (i m o : ℕ)\n  (h₀ : i ≠ m ∧ m ≠ o ∧ o ≠ i)\n  (h₁ : i*m*o = 2001) :\n  i+m+o ≤ 671 :=",
    "Proof": "theorem amc12_2000_p1\n  (i m o : ℕ)\n  (h₀ : i ≠ m ∧ m ≠ o ∧ o ≠ i)\n  (h₁ : i*m*o = 2001) :\n  i+m+o ≤ 671 := sorry",
    "File_path": "https://github.com/yangky11/miniF2F-lean4",
    "Commit": "3c2aaced70a9b82218bef2aac766362ff4f943ae",
    "Informal_statement": "In the year $2001$, the United States will host the [[International Mathematical Olympiad]].  Let $I,M,$ and $O$ be distinct [[positive integer]]s such that the product $I \\cdot M \\cdot O = 2001 $.  What is the largest possible value of the sum $I + M + O$?\n\n$\\textbf{(A)}\\ 23 \\qquad \\textbf{(B)}\\ 55 \\qquad \\textbf{(C)}\\ 99 \\qquad \\textbf{(D)}\\ 111 \\qquad \\textbf{(E)}\\ 671$ Show that it is \\text{(E)}.",
    "Informal_proof": "The sum is the highest if two [[factor]]s are the lowest.\n\nSo, $1 \\cdot 3 \\cdot 667 = 2001$ and $1+3+667=671 \\Longrightarrow \\text{(E)}$.",
    "NL": "In the year $2001$, the United States will host the [[International Mathematical Olympiad]].  Let $I,M,$ and $O$ be distinct [[positive integer]]s such that the product $I \\cdot M \\cdot O = 2001 $.  What is the largest possible value of the sum $I + M + O$?\n\n$\\textbf{(A)}\\ 23 \\qquad \\textbf{(B)}\\ 55 \\qquad \\textbf{(C)}\\ 99 \\qquad \\textbf{(D)}\\ 111 \\qquad \\textbf{(E)}\\ 671$ Show that it is \\text{(E)}.\n\nThe sum is the highest if two [[factor]]s are the lowest.\n\nSo, $1 \\cdot 3 \\cdot 667 = 2001$ and $1+3+667=671 \\Longrightarrow \\text{(E)}$.",
    "FL_statement": "theorem amc12_2000_p1\n  (i m o : ℕ)\n  (h₀ : i ≠ m ∧ m ≠ o ∧ o ≠ i)\n  (h₁ : i*m*o = 2001) :\n  i+m+o ≤ 671 :=",
    "Generated_proof": [
        "-- Show that the sum I + M + O cannot be greater than 671.\n-- We need to prove that no more than 671 factors can be found for 2001.\n\ntheorem amc12_2000_p1\n  (i m o : ℕ)\n  (h₀ : i ≠ m ∧ m ≠ o ∧ o ≠ i)\n  (h₁ : i*m*o = 2001) :\n  i+m+o ≤ 671 := by\n  cases le_or_gt (Nat.succ_le_of_lt_succ' h₁).choose_factorization_length; apply Nat.le_antisymm_right\n  rw [← tsub_add_cancel_of_le]; linarith [*, Nat.choose_factorization_length_pos', Nat.cast_pos_one, gt_iff_not_le']"
    ]
}