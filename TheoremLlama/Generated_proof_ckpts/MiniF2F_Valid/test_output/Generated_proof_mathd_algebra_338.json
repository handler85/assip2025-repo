{
    "Name": "mathd_algebra_338",
    "Statement": "theorem mathd_algebra_338\n  (a b c : ℝ)\n  (h₀ : 3 * a + b + c = -3)\n  (h₁ : a + 3 * b + c = 9)\n  (h₂ : a + b + 3 * c = 19) :\n  a * b * c = -56 :=",
    "Proof": "theorem mathd_algebra_338\n  (a b c : ℝ)\n  (h₀ : 3 * a + b + c = -3)\n  (h₁ : a + 3 * b + c = 9)\n  (h₂ : a + b + 3 * c = 19) :\n  a * b * c = -56 := sorry",
    "File_path": "https://github.com/yangky11/miniF2F-lean4",
    "Commit": "3c2aaced70a9b82218bef2aac766362ff4f943ae",
    "Informal_statement": "If $3a + b + c = -3, a+3b+c = 9, a+b+3c = 19$, then find $abc$. Show that it is -56.",
    "Informal_proof": "Summing all three equations yields that $5a + 5b + 5c = -3 + 9 + 19 = 25$. Thus, $a + b + c = 5$. Subtracting this from each of the given equations, we obtain that $2a = -8, 2b = 4, 2c = 14$. Thus, $a = -4, b = 2, c =7$, and their product is $abc = -4 \\times 2 \\times 7 = -56$.",
    "NL": "If $3a + b + c = -3, a+3b+c = 9, a+b+3c = 19$, then find $abc$. Show that it is -56.\n\nSumming all three equations yields that $5a + 5b + 5c = -3 + 9 + 19 = 25$. Thus, $a + b + c = 5$. Subtracting this from each of the given equations, we obtain that $2a = -8, 2b = 4, 2c = 14$. Thus, $a = -4, b = 2, c =7$, and their product is $abc = -4 \\times 2 \\times 7 = -56$.",
    "FL_statement": "theorem mathd_algebra_338\n  (a b c : ℝ)\n  (h₀ : 3 * a + b + c = -3)\n  (h₁ : a + 3 * b + c = 9)\n  (h₂ : a + b + 3 * c = 19) :\n  a * b * c = -56 :=",
    "Generated_proof": [
        "-- Given that 3a + b + c = -3, a+3b+c = 9, a+b+3c = 19, \n-- find the value of abc.\n\n-- Proof:\n\n-- Summing all three equations yields that 5a + 5b + 5c = -3 + 9 + 19 = 25. \n-- Thus, a + b + c = 5.\n\n-- Subtracting this from each of the given equations, we obtain that\n-- 2a = -8, 2b = 4, 2c = 14.\n\n-- Thus, a = -4, b = 2, c =7, and their product is abc = -4 × 2 × 7 = -56.\n\n-- End of proof.\n\n-- Implementation:\n\n-- Use `simp` to rewrite the goal using the given equations and basic properties.\n\n-- Apply `mul_assoc` to associate the multiplication operation.\n\n-- Use `@Int.casesOnNat` to handle cases where a, b, or c could be negative.\n\n-- Prove the goal for each case.\n\n-- Case: a, b, c are non-negative.\n\n-- Simplify using the given equations.\n\n-- Use `mul_left_distrib` and `mul_right_distrib` to distribute multiplication over addition.\n\n-- Combine terms using `add_sub_cancel`.\n\n-- Use `Rat.cast_nat_cast` to convert the result back to an integer.\n\n-- Case: one of a, b, or c is negative.\n\n-- Use `Int.ofNat_ofNatCast` to convert the other two variables to natural numbers.\n\n-- Prove the goal as before.\n\n-- End of implementation.\n\n-- Porting note: added cast_rat_cast\ntheorem mathd_algebra_338\n  (a b c : ℝ)\n  (h₀ : 3 * a + b + c = -3)\n  (h₁ : a + 3 * b + c = 9)\n  (h₂ : a + b + 3 * c = 19) :\n  a * b * c = -56 := by\n  -- porting note: added cast_rat_cast\n  simp_rw [@Rat.cast_nat_cast _ a, @Rat.cast_nat_cast _ b, @Rat.cast_nat_cast _ c];\n  simpa only [← @Rat.cast_nat_cast ℝ _, ← @Rat.cast_nat_cast ℝ _, mul_left_distrib,\n      mul_right_distrib, add_sub_cancel'] using\n    (@Int.casesOnNat ℝ a; |a|) fun i => @Int.casesOnNat ℝ b; |b| fun j =>\n      @Int.casesOnNat ℝ c; |c| fun k => by norm_num [(i + j + k) * (i + j + k - 1)]..\n        ((k - j - i).trans <| Int.sub_le_int_add_left j <| (k.trans <| sub_le_self <| k.le_succ).symm)\n        ((k - j - i - 1).trans <| Int.add_le_add_right (sub_le_self <| k.succ.le) j))"
    ]
}