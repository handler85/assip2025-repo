{
    "Name": "mathd_numbertheory_321",
    "Statement": "theorem mathd_numbertheory_321\n  (n :  ZMod 1399)\n  (h₁ : n = 160⁻¹) :\n  n = 1058 :=",
    "Proof": "theorem mathd_numbertheory_321\n  (n :  ZMod 1399)\n  (h₁ : n = 160⁻¹) :\n  n = 1058 := sorry",
    "File_path": "https://github.com/yangky11/miniF2F-lean4",
    "Commit": "3c2aaced70a9b82218bef2aac766362ff4f943ae",
    "Informal_statement": "Notice that  \\[35\\cdot40=1400.\\]Find some integer $n$ with $0\\leq n<1399$ such that $n$ is the multiplicative inverse to 160 modulo 1399. Show that it is 1058.",
    "Informal_proof": "Taking the given equation modulo 1399 gives \\[35\\cdot40\\equiv1\\pmod{1399},\\]so we know that 35 is the multiplicative inverse to 40.  We want to use this to find the multiplicative inverse to $4\\cdot40=160$, so we want to try to \"divide\" 35 by 4.\n\nThe difficulty in dividing by 4 is that 35 is odd.  We do know, though, that  \\[35\\equiv35+1399\\equiv1434\\pmod{1399}\\]and this number is even!  Let's go even further, though, to find a multiple of 4: \\[35\\equiv35+3\\cdot1399\\equiv4232\\pmod{1399}.\\]Factoring 4 we get  \\[35\\equiv4\\cdot1058\\pmod{1399}.\\]Finally we multiply by 40: \\[1\\equiv 40\\cdot35\\equiv40\\cdot4\\cdot1058\\equiv160\\cdot1058\\pmod{1399}.\\]This argument is inelegant.  Let's write it in a more clear order: \\begin{align*}\n1058\\cdot160&\\equiv1058\\cdot(4\\cdot40)\\\\\n&\\equiv(1058\\cdot4)\\cdot40\\\\\n&\\equiv35\\cdot40\\\\\n&\\equiv1\\pmod{1399}.\n\\end{align*}The multiplicative inverse to 160 modulo 1399 is $1058$.",
    "NL": "Notice that  \\[35\\cdot40=1400.\\]Find some integer $n$ with $0\\leq n<1399$ such that $n$ is the multiplicative inverse to 160 modulo 1399. Show that it is 1058.\n\nTaking the given equation modulo 1399 gives \\[35\\cdot40\\equiv1\\pmod{1399},\\]so we know that 35 is the multiplicative inverse to 40.  We want to use this to find the multiplicative inverse to $4\\cdot40=160$, so we want to try to \"divide\" 35 by 4.\n\nThe difficulty in dividing by 4 is that 35 is odd.  We do know, though, that  \\[35\\equiv35+1399\\equiv1434\\pmod{1399}\\]and this number is even!  Let's go even further, though, to find a multiple of 4: \\[35\\equiv35+3\\cdot1399\\equiv4232\\pmod{1399}.\\]Factoring 4 we get  \\[35\\equiv4\\cdot1058\\pmod{1399}.\\]Finally we multiply by 40: \\[1\\equiv 40\\cdot35\\equiv40\\cdot4\\cdot1058\\equiv160\\cdot1058\\pmod{1399}.\\]This argument is inelegant.  Let's write it in a more clear order: \\begin{align*}\n1058\\cdot160&\\equiv1058\\cdot(4\\cdot40)\\\\\n&\\equiv(1058\\cdot4)\\cdot40\\\\\n&\\equiv35\\cdot40\\\\\n&\\equiv1\\pmod{1399}.\n\\end{align*}The multiplicative inverse to 160 modulo 1399 is $1058$.",
    "FL_statement": "theorem mathd_numbertheory_321\n  (n :  ZMod 1399)\n  (h₁ : n = 160⁻¹) :\n  n = 1058 :=",
    "Generated_proof": [
        "-- Given 35 * 40 = 1400 mod 1399,\n-- Find n < 1399 such that n * 160 = 1 mod 1399.\n-- Show that n = 1058.\n\n-- Input:\n--   n: an element in ZMod 1399\n--   h₁: the equation 35 * 40 = 1 mod 1399\n--\n-- Output:\n--   n = 1058\n\n-- Proof:\n--   Use ZMod.eq_of_dvd_left h₁ (ZMod.dvd_add_right _ _) to obtain 1 = 1 + (-1) * 1058 mod 1399.\n--   Apply ZMod.mul_left_injective' to conclude n = 1058.\n--   QED\ntheorem mathd_numbertheory_321\n  (n :  ZMod 1399)\n  (h₁ : n = 160⁻¹) :\n  n = 1058 :=\n  ZMod.eq_of_dvd_left h₁ <| ZMod.dvd_add_right _ _\n      (by rw [← ZMod.nsmul_def', ← ZMod.neg_zmod, ZMod.mul_left_injective',\n        ZMod.zsmul_neg, neg_one_zsmul, ZMod.sub_self, add_tsub_cancel_of_le, mul_one])\n      (by rw [neg_one_zsmul, ZMod.sub_self, add_tsub_cancel_of_le, mul_one, one_zsmul])\n      (by rw [one_zsmul, ZMod.sub_self, add_tsub_cancel_of_le, mul_one, one_zsmul, sub_self])\n      (by rw [mul_one, one_zsmul, ZMod.sub_self, add_tsub_cancel_of_le, mul_one, one_zsmul])\n      (by rw [mul_one, one_zsmul, ZMod.sub_self, add_tsub_cancel_of_le, mul_one, one_zsmul])\n      (by rw [mul_one, one_zsmul, ZMod.sub_self, add_tsub_cancel_of_le, mul_one, one_zsmul])\n      (by rw [mul_one, one_zsmul, ZMod.sub_self, add_tsub_cancel_of_le, mul_one, one_zsmul])"
    ]
}