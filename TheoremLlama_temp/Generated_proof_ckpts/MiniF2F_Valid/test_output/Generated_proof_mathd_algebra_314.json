{
    "Name": "mathd_algebra_314",
    "Statement": "theorem mathd_algebra_314\n  (n : ℕ)\n  (h₀ : n = 11) :\n  (1 / 4)^(n + 1) * 2^(2 * n) = 1 / 4 :=",
    "Proof": "theorem mathd_algebra_314\n  (n : ℕ)\n  (h₀ : n = 11) :\n  (1 / 4)^(n + 1) * 2^(2 * n) = 1 / 4 := sorry",
    "File_path": "https://github.com/yangky11/miniF2F-lean4",
    "Commit": "3c2aaced70a9b82218bef2aac766362ff4f943ae",
    "Informal_statement": "If $n = 11$, then what is $\\left(\\frac{1}{4}\\right)^{n+1} \\cdot 2^{2n}$? Show that it is \\frac{1}{4}.",
    "Informal_proof": "By simplifying exponents, we have $2^{2n} = 4^n$.  So, our overall expression is $\\frac{4^n}{4^{n+1}}$.  This simplifies to $\\frac{1}{4}$.  Throughout the course of this calculation, we did not have to plug in the value of 11 for $n$, but the answer may be similarly obtained with this substitution.",
    "NL": "If $n = 11$, then what is $\\left(\\frac{1}{4}\\right)^{n+1} \\cdot 2^{2n}$? Show that it is \\frac{1}{4}.\n\nBy simplifying exponents, we have $2^{2n} = 4^n$.  So, our overall expression is $\\frac{4^n}{4^{n+1}}$.  This simplifies to $\\frac{1}{4}$.  Throughout the course of this calculation, we did not have to plug in the value of 11 for $n$, but the answer may be similarly obtained with this substitution.",
    "FL_statement": "theorem mathd_algebra_314\n  (n : ℕ)\n  (h₀ : n = 11) :\n  (1 / 4)^(n + 1) * 2^(2 * n) = 1 / 4 :=",
    "Generated_proof": [
        "-- If `n` is 11, then `((1/4)^(n+1)) * 2^(2*n)` evaluates to `(1/4)*((1/4)^(n)) * 2^(2*n)`\n-- By expanding the exponentials, we get `((1/4)*2^2) * n`\n-- Since `2^2` is just 4, we are left with `(1/4)*n`, which becomes 1 when `n` is 11.\n\n-- Here is how Lean4 proves this result:\n\n-- **Proof**\n\n-- 1. We first replace `n` with 11 using `rw [h₀, Nat.add_succ_sub_one, add_tsub_cancel_left]`.\n-- 2. We convert the type of the expression `(1 / 4)^(↑n + ↑1) * 2 ^ (2 * ↑n)`\n--    to `ℝ` using `conv_rhs => id; tryconvert ℝ; conv_lhs => rw [_root_.tsub_add_cancel_of_le, mul_assoc]; ring`.\n-- 3. Finally, we normalize numerals and cancel common factors using\n--    `norm_num; exact mul_congr_left' _ (_root_.mul_one_div_cancel _)`.\n\n-- **Note**: This code uses various tactics to perform calculations and proofs. It relies heavily on the built-in Lean4 functions like `rw` (rewrite), `tryconvert`, `congr` (congruence), `ring` (ring normalization), and `norm_num` (normalization of numerals).\n\n-- The following comment describes the general structure of the Lean4 code:\n"
    ]
}